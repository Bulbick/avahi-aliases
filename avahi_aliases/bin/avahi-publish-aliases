#!/usr/bin/env python
import os, sys
import logging
import subprocess
log_prefix = "avahi-aliases"

logger = logging.getLogger(__name__)

HERE_DIR = os.path.abspath(os.path.dirname(__file__))
PUBLISH_CMD = os.path.join(HERE_DIR, 'avahi-publish-domain-alias')
PID_PATH = os.sep+os.path.join("tmp", "avahi-publish-alias.pid")
ALIAS_CONF_PATH = os.sep + os.path.join("etc","avahi","aliases.d")
CONFIG_FILES = ( os.sep + os.path.join("etc","avahi","aliases"), )
CONFIG_FILES += tuple([ os.path.join(ALIAS_CONF_PATH, config_file) for config_file in os.listdir(ALIAS_CONF_PATH)])

ALIASES=[]



def ensure_file (path):
	"""
		Looks for  file at provided path, creates it if it does not exist.
		Returns the file.
	"""
	rfile = None
	if not os.path.exists(path) and os.path.isfile(path) :
		rfile = open(path,"w+");
	return rfile


def get_config_files():
	""" Returns a list of config files """
	output = set()
	for config_file_path in CONFIG_FILES :
		config_file = open(config_file_path, 'r')
		for line in config_file :
			entry = line.strip('\n')
			if len(entry) > 0:
				output.add(entry)
		config_file.close()

	if len(output)==0:
		sys.exit("Nothing to announce.")

	return output


def stop():
	logger.info(log_prefix, "Killing old alias announcers")
	pids = open(PID_PATH).readlines()
	if len(pids)>0:
		for pid in pids :
			pid = pid.strip('\n')
			if len(pid) > 0 :
				os.Popen(["kill", pid])


		pids = open(PID_PATH, "w").write("")


def start():
	stop()
	logger.info(log_prefix, "Publishing aliases")

	for alias in get_config_files():
		logger.info("publishing {}".format(alias))
		process = subprocess.Popen([PUBLISH_CMD, txt])
		alias_pid.write("%s\n" % str(process.pid))

	alias_pid.close()


def restart():
	stop()
	start()


if __name__ == "__main__":
	if not os.path.exists(PID_PATH) :
		logger.info("Creating PID file")
		open(PID_PATH,"w").close()
	alias_pid = open(PID_PATH,"r")
	methods = sys.argv[1:]
	allowed_methods = ("stop", "start", "restart")

	for method in methods:
		if method in allowed_methods :
			func = locals().get(method, None)
			func()
		else:
			raise Exception("Invalid method {}. use one of {}".format(method, " ".join(allowed_methods)))

